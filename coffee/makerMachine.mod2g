use coffee as knowledge. % utiliza a base de conhecimento criada
use coffee as actionspec. % utiliza a base de ações criada

exit=nogoals.

module makerMachine {
	% se outro agente precisa de um produto, e nós temos, faz a entrega do produto
	if goal(delivered(Machine, Product)), bel(have(Product))
		then (Machine).send(have(Product)) + insert(delivered(Machine, Product)).
		
	% se nós precisamos de um produto, e podemos faze-lo nós mesmos, então faz
	if goal(have(Product)), bel(canMake(Product)) then make(Product) + log("Xavier is making _ " + Product + " _.").
	
	% se nós não podemos produzir algo, precisamos pedir por isso
	% se nós sabemos quem pode fazer, pedimos pra esse agente fazer pra nós
	if goal(have(Product)), bel(canProduce(Machine,Product))
		then (Machine).send!(have(Product)).
		
	% se não sabemos quem pode fazer, perguntamos pra todo mundo oq eles podem fazer
	if goal(have(Product)), not(bel(canProduce(_,Product)))
		then allother.send?(canProduce(_)) + log("Xavier is asking _ what the others can produce _.").
	
	% se não podemos produzir, perguntamos se alguém tem
	if goal(have(Product)), not(bel(canProduce(Product)))
		then allother.send!(have(Product)) + log("Xavier is asking for _ " + Product + " _.").
		
	% se algum outro agente precisa de algo que sabemos fazer, adota o objetivo de fazer
	forall (Machine).sent!(have(Product)) do adopt(delivered(Machine,Product)) + log("Xavier will make _ " + Product + " for _ " + Machine + " _.").
	
}
use coffee as knowledge. % utiliza a base de conhecimento criada

module makerEvents {
	% responde informações sobre oque pode produzir
	forall (Machine).sent?(canProduce(_)), bel(canProduce(Product) ; have(Product))
		do (Machine).send:(canProduce(Product)) + log("Xavier is telling _ " + Machine + " that it can produce _ " + Product + " _.").
		
	% processa informação sobre outros agentes
	forall (Machine).sent:(canProduce(Product)) do insert(canProduce(Machine,Product)).
	
	% precessa os pedidos de entrega
	forall (Machine).sent!(have(Product)) do adopt(delivered(Machine,Product)) + log("Xavier heard _ " + Machine + " _ wants _" + Product + " _.").
	
	% processa as reais entregas
	forall (Machine).sent(have(Product)) do insert(have(Product)) + log("Xavier _ now has _" + Product + " _.").
	
	% recebemos o pedido de um item, mas não possuímos ele ainda
	if goal(delivered(Machine, Product)) then adopt(have(Product)) + log(Machine + " _ wants _" + Product + " but Xavier does not have it _.").
	
	% nós podemos produzir, mas precisamos do ingrediente
	if goal(have(Product)), bel(canProduce(Product), requiredFor(Product,Ingredient))
		then adopt(have(Ingredient)) + log("Xavier is _ getting _ " + Ingredient + " to make _ " + Product + " _.").
		
	% se outro agente precisa do produto, e nós temos, entrega o produto
	if goal(delivered(Machine, Product)), bel(have(Product))
		then (Machine).send(have(Product)) + insert(delivered(Machine, Product)) + log("Xavier is _ delivering _ " + Product + " to _ " + Machine + " _.").
}